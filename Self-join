-Task
'''
Join populations with itself ON country_code.

Select the country_code from p1 and the size field from both p1 and p2. SQL won't allow same-named fields, so alias p1.size as size2010 and p2.size as size2015.
'''
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Solution
Select p1.country_code,p1.size as size2010 ,p2.size as size2015
From populations as p1
  Inner Join populations as p2
    Using (country_code)
    ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
    ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-task  
'''
Notice from the result that for each country_code you have four entries laying out all combinations of 2010 and 2015.

Extend the ON in your query to include only those records where the p1.year (2010) matches with p2.year - 5 (2015 - 5 = 2010). 
This will omit the three entries per country_code that you aren't interested in.
'''
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--SOLUTION
SELECT p1.country_code,
       p1.size AS size2010,
       p2.size AS size2015
-- From populations (alias as p1)
FROM populations as p1
  -- Join to itself (alias as p2)
  Inner JOIN populations as p2
    -- Match on country code
    ON p1.country_code = p2.country_code
        -- and year (with calculation)
        AND p1.year = p2.year - 5
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- TASK
'''
As you just saw, you can also use SQL to calculate values like p2.year - 5 for you. 
With two fields like size2010 and size2015, you may want to determine the percentage increase from one field to the next:

With two numeric fields A and B , the percentage growth from  to  can be calculated as (B-A)/A*100.

Add a new field to SELECT, aliased as growth_perc, that calculates the percentage population growth from 2010 to 2015 for each country, using p2.size and p1.size.
'''
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Solution
SELECT p1.country_code,
       p1.size AS size2010, 
       p2.size AS size2015,
       -- Calculate growth_perc
       ((p2.size - p1.size)/p1.size * 100.0) AS growth_perc
-- From populations (alias as p1)
FROM populations AS p1
  -- Join to itself (alias as p2)
  INNER JOIN populations AS p2
    -- Match on country code
    ON p1.country_code = p2.country_code
        -- and year (with calculation)
        AND p1.year = p2.year - 5;
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 * CASE WHEN AND THEN*
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -TASK
 Using the countries table, create a new field AS geosize_group that groups the countries into three groups:

If surface_area is greater than 2 million, geosize_group is 'large'.
If surface_area is greater than 350 thousand but not larger than 2 million, geosize_group is 'medium'.
Otherwise, geosize_group is 'small'.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--SOLUTION
SELECT name, continent, code, surface_area,
    -- First case
    CASE WHEN surface_area > 2000000 THEN 'large'
        -- Second case
        WHEN surface_area > 350000 and surface_area<2000000 THEN 'medium'
        -- Else clause + end
        ELSE 'small' END
        -- Alias name
        AS geosize_group
-- From table
FROM countries;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*INNER CHALLENGE*
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-Task
Using the populations table focused only for the year 2015, create a new field aliased as popsize_group to organize population size into

'large' (> 50 million),
'medium' (> 1 million), and
'small' groups.
Select only the country code, population size, and this new popsize_group as fields.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-SOLUTION

SELECT country_code, size,
    -- First case
    CASE WHEN size > 50000000 THEN 'large'
        -- Second case
        WHEN size > 1000000 and size< 50000000 THEN 'medium'
        -- Else clause + end
        ELSE 'small' END
        -- Alias name (popsize_group)
        AS popsize_group
-- From table
FROM populations
-- Focus on 2015
WHERE year = 2015;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-TASK
Use INTO to save the result of the previous query as pop_plus. You can see an example of this in the countries_plus code in the assignment text. 
Make sure to include a ; at the end of your WHERE clause!

Then, include another query below your first query to display all the records in pop_plus using 
SELECT * FROM pop_plus; so that you generate results and this will display pop_plus in the query result.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- SOLUTION
SELECT country_code, size,
    CASE WHEN size > 50000000 THEN 'large'
        WHEN size > 1000000 THEN 'medium'
        ELSE 'small' END
        AS popsize_group
-- Into table
Into pop_plus
FROM populations
WHERE year = 2015;

-- Select all columns of pop_plus
select *
from pop_plus
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- Task
SELECT country_code, size,
  CASE WHEN size > 50000000
            THEN 'large'
       WHEN size > 1000000
            THEN 'medium'
       ELSE 'small' END
       AS popsize_group
INTO pop_plus       
FROM populations
WHERE year = 2015;

-- Select fields
Select name, continent, geosize_group, popsize_group
-- From countries_plus (alias as c)
From countries_plus AS c
  -- Join to pop_plus (alias as p)
  Inner Join pop_plus as p
    -- Match on country code
    ON c.code= p.country_code
-- Order the table    
Order by geosize_group;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
